# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  run-tests:
    name: Python ${{ matrix.python-version }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:

      # --- Check out code and setup Python

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # --- Install Poetry

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-dotlocal-${{ runner.os }}-${{ runner.arch }}-${{ matrix.python-version }}-${{ hashFiles('.github/workflows/CI.yml') }}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # --- Install package dependencies

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-venv-${{ runner.os }}-${{ runner.arch }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install package dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      # --- Run tests

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # The GitHub editor is 127 chars wide and save output to variable
          OUTPUT=$(flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics)
          echo "$OUTPUT"
          # Take last line of output
          count=$(echo "$OUTPUT" | tail -1)
          # Fail test explicitly if count >= 10
          if [[ $count -ge 10 ]]; then exit $count; fi
  
      - name: Setup env for tests
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

      - name: Run tests
        run: |
          source $VENV
          export MAX_THRESHOLD_SIZE=10240
          poetry run pytest --cov-report=xml
